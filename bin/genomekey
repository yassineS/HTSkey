#!/usr/bin/env python

import ipdb
import argparse

from cosmos import Execution, Cosmos, Recipe, Input, ExecutionStatus, signal_execution_status_change

from genomekey.settings            import settings as genomekey_settings # will override cosmos.settings
from genomekey.workflows.pipeline  import pipeline

###############################
# bam
###############################

def bam(workflow,input_bam,input_bam_list,test_bam,high_coverage,chromosome_only_split,**kwargs):
    """
    Input file is a bam with properly annotated readgroups.
    """
    input_bams = input_bam_list.read().strip().split('\n') if input_bam_list else []
    if input_bam:
        input_bams.append(input_bam.name)

    if len(input_bams) == 0:
        raise WorkflowException, 'At least 1 BAM input required'

    # if we have a high coverage genome, override GATK options for realignment
    if high_coverage:
        genomekey_settings['gatk_realigntarget'] = '--mismatchFraction 0.30 --maxIntervalSize 650'
        genomekey_settings['gatk_indelrealign'] = '--maxReadsInMemory 300000 --maxReadsForRealignment 500000 --maxReadsForConsensuses 500 --maxConsensuses 100'

#    dag = DAG(ignore_stage_name_collisions=True)

#    dag.sequence_(
#        pipeline(input_bams, test_bam=test_bam, chromosome_only_split=chromosome_only_split),
#        configure(genomekey_settings),
#        add_run(workflow)
#    )
    
###############################
# CLI Configuration
###############################

def main():

    ## Override default drmaa_specification
    session.drmaa_spec = genomekey_settings['drmaa_spec']

    parser = argparse.ArgumentParser(description='WGA')
    subparsers = parser.add_subparsers(title="Commands", metavar="<command>")

    bam_sp = subparsers.add_parser('bam',help="Input is a bam or bam file list",description=bam.__doc__)
    cli.add_workflow_args(bam_sp)
    bam_sp.add_argument('-i', '--input_bam',     type=file,help='A path to a BAM file')
    bam_sp.add_argument('-il','--input_bam_list',type=file,help='A path to a file containing a list of paths to BAMs, separated by newlines')
    bam_sp.add_argument('-t','--test_bam',action='store_true',help='Only do stages on chr1, skips VQSR, strictly for testing only')
    bam_sp.add_argument('-hc','--high_coverage',action='store_true',help='Special GATK options to handle high-coverage genomes')
    bam_sp.add_argument('-c','--chromosome_only_split',action='store_true',help='Split only on chromosomes not read groups')
    bam_sp.set_defaults(func=bam)

    wf,kwargs = cli.parse_args(parser)
    kwargs['func'](wf,**kwargs)


if __name__ == '__main__':
    with ipdb.launch_ipdb_on_exception():    
        main()
